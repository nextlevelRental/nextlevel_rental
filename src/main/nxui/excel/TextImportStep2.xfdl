<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.5">
  <TypeDefinition url="..\default_typedef.xml"/>
  <Form id="TextImportStep2" classname="TextImportStep2" left="0" top="0" width="500" height="600" titletext="step2: preview data" onload="TextImportStep2_onload">
    <Layouts>
      <Layout>
        <Static id="Static00" taborder="0" text="1. start import at row: " left="20" top="24" width="160" height="26"/>
        <Spin id="spn_startRow" taborder="1" value="1" left="186" top="26" width="50" height="20" type="normal" max="10" min="1" style="buttonsize:17;" ontextchanged="spn_startRow_ontextchanged"/>
        <GroupBox id="GroupBox00" text="Delimiters" taborder="2" left="20" top="112" width="460" height="45" style="titlepadding:0 3 0 3;border:1 solid #c0c0c0ff ;color:lightcoral;font:bold 10 Verdana;"/>
        <Static id="Static01" taborder="3" text="2. Data Preview" left="20" top="80" width="120" height="26"/>
        <Grid id="grd_dataPreview" taborder="4" useinputpanel="false" left="20" top="172" width="460" height="372" binddataset="ds_dataPreview">
          <Formats/>
        </Grid>
        <Button id="btn_prev" taborder="5" text="Back" onclick="btn_prev_onclick" left="272" top="553" width="60" height="30"/>
        <Button id="btn_next" taborder="6" text="Next" onclick="btn_next_onclick" enable="false" left="346" top="553" width="60" height="30"/>
        <Button id="btn_cancel" taborder="7" text="Cancel" onclick="btn_cancel_onclick" left="420" top="552" width="60" height="30"/>
        <CheckBox id="chk_seperatorTab" taborder="8" text="Tab" left="28" top="130" width="50" height="20" style="buttonsize:15;" value="false" onchanged="separator_onchanged"/>
        <CheckBox id="chk_seperatorSpace" taborder="9" text="Space" left="91" top="130" width="68" height="20" style="buttonsize:15;" onchanged="separator_onchanged"/>
        <CheckBox id="chk_seperatorComma" taborder="10" text="Comma" left="172" top="130" width="70" height="20" style="buttonsize:15;" onchanged="separator_onchanged" value="true"/>
        <CheckBox id="chk_seperatorSemicolon" taborder="11" text="Semicolon" left="255" top="130" width="88" height="20" style="buttonsize:15;" onchanged="separator_onchanged"/>
        <CheckBox id="chk_seperatorEtc" taborder="12" text="Other:" left="356" top="130" width="62" height="20" style="buttonsize:15;" onchanged="separator_onchanged"/>
        <Edit id="edt_etc" taborder="13" left="424" top="130" width="46" height="20" maxlength="1" ontextchanged="edt_etc_ontextchanged"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_textFile" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="data" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_dataPreview" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false"/>
    </Objects>
    <Script type="xscript5.0"><![CDATA[

this.isFirstDataPreview = true;
this.cellLine = "";
this.dsSelectedData = "";
this.fileType = "txt";

this.TextImportStep2_onload = function(obj:Form, e:nexacro.LoadEventInfo)
{
	this.cellLine = this.parent.cellLine;
	this.initForm();	
}


//init. form 
this.initForm = function()
{
	this.setTitleText();
	
	this.setDataPreview(["comma"]);
	
	this.parent.setDisplayLoadingImage(false);
	
	
}


this.setTitleText = function()
{
	var ownFrame = this.getOwnerFrame();
	ownFrame.set_showcascadetitletext(false);
	ownFrame.set_titletext("Step 2 of 3: Preview data");
}


/**
 * 구분자에 해당하는 data를 그리드에 표시한다.
 * @param {array.<string>} types 구분자 type 문자열 배열.
 *                        예) 탭: "tab", 컴마: "comma", 공백: "space". 
 */
this.setDataPreview = function(types)
{
	var columnCount = this.getDataColumnCount(types);
	var dataset = this.ds_dataPreview;
	
	this.grd_dataPreview.set_enableevent(false);
	this.grd_dataPreview.set_enableredraw(false);	
	dataset.set_enableevent(false);
	
	this.addColumnToDataset(dataset, columnCount);
 	this.setSplitData(dataset, columnCount, types);
 	this.createGridFormat(columnCount);
 	
 	dataset.set_rowposition(-1);
 	
	this.grd_dataPreview.set_enableevent(true);
	this.grd_dataPreview.set_enableredraw(true);	
	dataset.set_enableevent(true);

	this.isFirstDataPreview = false;
	
// 	trace(dataset.saveXML());
// 	trace(this.grd_dataPreview.formats);
	this.btn_next.set_enable(true);
 	
}


/**
 * 구분자로 분리된 data의 최대 컬럼count를 반환한다.
 * [주의사항] 미리보기용 데이터를 기준으로 계산하기 때문에
 *             구분자로 나뉜 데이터 컬럼개수에 오차가 발생할 수 있다.
 * @param {array.<string>} types 구분자 type 문자열 배열.
 *                        예) 탭: "tab", 컴마: "comma", 공백: "space".
 * @return {number} 구분자로 분리된 최대 column 개수
 */
this.getDataColumnCount = function(types)
{
	var typeLength = types.length;
	var textDataset = this.ds_textFile;
	if(this.isFirstDataPreview)
	{
		var ownFrame = this.getOwnerFrame();
		var mainForm = ownFrame.form;
		var tempDataset = mainForm.div_step1.ds_dataPreview;
		//trace("tempDataset >>> " + tempDataset.saveXML())
		
		textDataset.copyData(tempDataset);	
		mainForm.div_step1.removeFile(0);
	}

	//trace(textDataset.saveXML());
	
	var rowCount = textDataset.rowcount;
	var convertType = this.getConvertType(types);
	var convertTypeLength = convertType.length;
	var data, dataArray;
	var startRow = this.spn_startRow.value - 1;
	
	
	var maxSplitCount = 0;
	for(var i = startRow; i < rowCount; i++)
	{
		data = textDataset.getColumn(i, "data");
		dataArray = "";
		//trace("\n\n======== convertTypeLength="+convertTypeLength);
		
		if(convertTypeLength == 0)
		{
			dataArray = [data];
		}
		else
		{
			for(var j = 0; j < convertTypeLength; j++)
			{
				if(j==0)
				{
					dataArray = data.split(convertType[j]);
				}
				else
				{
					dataArray = this.splitDataDetail(dataArray, convertType[j]);
				}
			}		
		}
		
		if(maxSplitCount < dataArray.length) maxSplitCount = dataArray.length;
		
	}

	return maxSplitCount;
}


/**
 * 입력받은 구분자 문자열을 실제 치환값으로 반환한다.
 * @param {array.<string>} types 구분자 type 문자열 배열.
 *                        예) 탭: "tab", 컴마: "comma", 공백: "space".
 * @return {array.<string>} 실제 치환 문자열의 배열.
 */
this.getConvertType = function(types)
{
	var convertType = [];
	var tempType;
	var typeLength = types.length;
	
	for(var i = 0; i < typeLength; i++)
	{
		tempType = types[i].toLowerCase();
		
		if(tempType == "tab")
		{
			convertType.push("	");
		}
		else if(tempType == "comma")
		{
			convertType.push(",");
		}
		else if(tempType == "space")
		{
			convertType.push(" ");
		}
		else if(tempType == "semicolon")
		{
			convertType.push(";");
		}
		else
		{
			convertType.push(tempType);
		}
		
	}
	
	return convertType;
}


/**
 * 문자열 배열의 Data를 구분자로 분리한 문자열 배열의 반환한다.
 * @param {array.<string>} dataArray 한 row의 컬럼값들에 해당하는 
 *                         문자열 배열.
 * @param {string} seperator 문자열 분할에 사용될 구분자.
 */
this.splitDataDetail = function(dataArray, seperator)
{
	var dataLength = dataArray.length;
	var extractionString;
	var tempArray = [];
	var tempData;
	var result;
	for(var i = 0; i < dataLength; i++)
	{
		tempData = dataArray[i];
		extractionString = tempData.split(seperator);
		tempArray = tempArray.concat(extractionString);
	}
	
	return tempArray;
}


/**
 * dataset에 컬럼개수만큼 컬럼을 추가한다.
 * @param {dataset} dataset 컬럼이 추가될 dataset. 
 * @param {number} columnCount dataset에 추가될 컬럼 개수. 
 */
this.addColumnToDataset = function(dataset, columnCount)
{
	dataset.clear();
	for(var i = 0; i < columnCount; i++)
	{
		dataset.addColumn("col_" + i, "string");
	}
}

/**
 * dataset 컬럼에 문자열 배열값을 입력한다.
 * @param {dataset} dataset target dataset.
 * @param {number} columnCount dataset에 추가될 컬럼 개수. 
 * @param {array.<string>} types 구분자 type 문자열 배열.
 *                        예) 탭: "tab", 컴마: "comma", 공백: "space". 
 */
this.setSplitData = function(dataset, columnCount, types, textDataset)
{
	var typeLength = types.length;
	
	if(Eco.isEmpty(textDataset)) textDataset = this.ds_textFile;
	
	var rowCount = textDataset.rowcount;
	var convertType = this.getConvertType(types);
	var convertTypeLength = convertType.length;
	
	var data, dataArray;
	var startRow = this.spn_startRow.value - 1;
	
	for(var i = startRow; i < rowCount; i++)
	{
		data = textDataset.getColumn(i, "data");
		dataArray = "";
		//trace("\n\n======== convertTypeLength="+convertTypeLength);
		
		if(convertTypeLength == 0)
		{
			dataArray = [data];
		}
		else
		{
			for(var j = 0; j < convertTypeLength; j++)
			{
				if(j==0)
				{
					dataArray = data.split(convertType[j]);
				}
				else
				{
					dataArray = this.splitDataDetail(dataArray, convertType[j]);
				}
			}		
		}
		
		this.setDataToColumn(dataset, dataArray, columnCount);
	}
}



/**
 * 문자열 배열을 데이터 미리보기 dataset에 값을 반영한다.
 * @param {dataset} dataset target dataset. 
 * @param {array.<string>} dataArray 한 row의 컬럼값들에 해당하는 
 *                         문자열 배열.
 * @param {number} columnCount target dataset column count.
 */
this.setDataToColumn = function(dataset, dataArray, columnCount)
{
	var dataLength = dataArray.length;
	var rowIndex = dataset.addRow();
	
	for(var i = 0; i < columnCount; i++)
	{
		dataset.setColumn(rowIndex, i , dataArray[i]);
	}
	
}


/**
 * 미리보기용 dataset을 보여줄 Grid format 생성
 * @param {dataset} dataset 컬럼이 추가될 dataset. 
 * @param {number} columnCount dataset에 추가될 컬럼 개수. 
 */
this.createGridFormat = function(columnCount)
{
	this.grd_dataPreview.createFormat();
	this.grd_dataPreview.deleteContentsRow("head", 0);
	this.grd_dataPreview.setBandProperty("body", "cellline", this.cellLine);
}


/**
 * 2단계에서 사용되는 dataset을 초기화 한다.
 */
this.clearData = function()
{
	this.ds_textFile.clear();
	this.ds_dataPreview.clear();
}



/**
 * 선택된 구분자 값들을 배열로 반환한다.
 * @return {array.<string>} 선택된 구분자 배열.
 */
this.getSeparatorValues = function()
{
	var separator = [this.chk_seperatorTab, this.chk_seperatorSpace
	                 , this.chk_seperatorComma, this.chk_seperatorSemicolon
	                 , this.chk_seperatorEtc];
	                 
	var count = separator.length;
	var separatorValue = [];
	var XComp;
	var type = "";
	
	for(var i = 0; i <count; i++)
	{
		XComp = separator[i];
		if(XComp.value)
		{
			type = XComp.name;
			type = type.replace("chk_seperator", "");
			
			if(type == "Etc")
			{
				type = this.edt_etc.value;
			}
			
			
			separatorValue.push(type);		
		}
	}
	
	return separatorValue;
}



this.btn_cancel_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	this.parent.close();
}

this.btn_prev_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	this.clearData();

	var ownFrame = this.getOwnerFrame();
	var mainForm = ownFrame.form;
	
	mainForm.div_step1.setTitleText();
	mainForm.div_step1.set_visible(true);
	mainForm.div_step2.set_visible(false);	
}




this.separator_onchanged = function(obj:CheckBox, e:nexacro.CheckBoxChangeEventInfo)
{
	if(obj === this.chk_seperatorEtc && this.chk_seperatorEtc.value)
	{
		if(Eco.isEmpty(this.edt_etc.value)) return;
	}
	
	var separatorValue= this.getSeparatorValues();
    this.setDataPreview(separatorValue);	
}

this.edt_etc_ontextchanged = function(obj:Edit,  e:nexacro.TextChangedEventInfo)
{
	if(this.chk_seperatorEtc.value && !Eco.isEmpty(obj.value))
	{
		var event = new nexacro.CheckBoxChangeEventInfo();
		this.separator_onchanged(this.chk_seperatorEtc, event);
	}	
}

this.btn_next_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	this.dsSelectedData = this.ds_dataPreview;
	var ownFrame = this.getOwnerFrame();
	var mainForm = ownFrame.form;
	
	mainForm.div_step1.set_visible(false);
	mainForm.div_step2.set_visible(false);
	mainForm.div_step3.set_url("");
	mainForm.div_step3.set_url("Example::ExcelImportStep3.xfdl");
	mainForm.div_step3.set_visible(true);	
}

this.spn_startRow_ontextchanged = function(obj:Spin, e:nexacro.TextChangedEventInfo)
{
	var separatorValue= this.getSeparatorValues();
    this.setDataPreview(separatorValue);	
}
]]></Script>
  </Form>
</FDL>
